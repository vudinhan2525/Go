// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: user.sql

package db

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (
   hashed_password, full_name, email, role
) VALUES (
  $1, $2, $3, $4
)
RETURNING user_id, hashed_password, full_name, email, role, password_changed_at, created_at
`

type CreateUserParams struct {
	HashedPassword string   `json:"hashed_password"`
	FullName       string   `json:"full_name"`
	Email          string   `json:"email"`
	Role           UserRole `json:"role"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.HashedPassword,
		arg.FullName,
		arg.Email,
		arg.Role,
	)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.HashedPassword,
		&i.FullName,
		&i.Email,
		&i.Role,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT user_id, hashed_password, full_name, email, role, password_changed_at, created_at FROM users
WHERE user_id = $1 LIMIT 1
`

func (q *Queries) GetUser(ctx context.Context, userID int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, userID)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.HashedPassword,
		&i.FullName,
		&i.Email,
		&i.Role,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT user_id, hashed_password, full_name, email, role, password_changed_at, created_at FROM users
WHERE email = $1 LIMIT 1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.HashedPassword,
		&i.FullName,
		&i.Email,
		&i.Role,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE users
  set email = coalesce($1, email),
  full_name = coalesce($2, full_name),
  hashed_password = coalesce($3, hashed_password),
  password_changed_at = coalesce($4, password_changed_at)
WHERE user_id = $5
RETURNING user_id, hashed_password, full_name, email, role, password_changed_at, created_at
`

type UpdateUserParams struct {
	Email             sql.NullString `json:"email"`
	FullName          sql.NullString `json:"full_name"`
	HashedPassword    sql.NullString `json:"hashed_password"`
	PasswordChangedAt sql.NullTime   `json:"password_changed_at"`
	UserID            int64          `json:"user_id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUser,
		arg.Email,
		arg.FullName,
		arg.HashedPassword,
		arg.PasswordChangedAt,
		arg.UserID,
	)
	var i User
	err := row.Scan(
		&i.UserID,
		&i.HashedPassword,
		&i.FullName,
		&i.Email,
		&i.Role,
		&i.PasswordChangedAt,
		&i.CreatedAt,
	)
	return i, err
}
